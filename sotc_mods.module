<?php // for emacs: -*- mode: php;-*-

function sotc_mods_get_current_group_nid() {
  return menu_get_object()->nid;
}

/**
 * Creates link for uploading a document to a specific group.
 */
function sotc_mods_upload_new_document_link($type) {
  $group_nid = sotc_mods_get_current_group_nid();
  if ($group_nid < 0) {
    return "";
  }
  $label = sprintf('Upload %s', ucwords(str_replace('-', ' ', $type)));
  return sprintf('<a href="add/%s?og_group_ref=%1d&destination=node/%1d">%s</a>',
                 $type,
                 $group_nid,
                 $group_nid,
                 $label);
}

/**
 * Implements hook_user_insert().
 *
 * Adds accounts to all existing groups when the account is created.
 */
function sotc_mods_user_insert (&$edit, $account, $category) {
  $groups = og_get_all_group();

  foreach ($groups as $group) {
    og_group('node', $group, array('entity' => $account));
  }
}

/**
 * Implementation of hook_form_alter().
 *
 * Hides group_audience field from forms if it exists and the user is not an
 * administrator.
 */
function sotc_mods_form_alter (&$form, &$form_state, $form_id) {
  global $user;
  if (key_exists('type', $form) && key_exists('#value', $form['type'])) {
    $type = $form['type']['#value'];
    $is_group_content = og_get_group_type('node', $type, 'group content');
    if ($form['#node_edit_form'] && $form['og_group_ref'] && $is_group_content && in_array('administrator', $user->roles) === FALSE) {
      $form['og_group_ref']['#access'] = FALSE;
    }
  }
}
